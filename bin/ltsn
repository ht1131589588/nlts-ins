#!/usr/bin/env node

const color = require('cli-color')
const pkg = require('../package.json')
// 从顶层 index.js 里面拿到lib下面模块暴露的方法
const { query, update } = require('../index')

// 输出结果到命令行窗口
function printResult(v) {
  update(v).then(dists => {
    const results = query(dists)
    console.log(color.blue(results))
    process.exit()
  })
}

// 打印版本号
function printVersion() {
  console.log(`ltsn ${pkg.version}`)
  process.exit()
}

// 打印帮助信息
function printHelp(code) {
  const lines = [
    '',
    '  Usage:',
    '    ltsn [8]',
    '',
    '  Options:',
    '    -v, --version             print the version of vc',
    '    -h, --help                display this message',
    '',
    '  Examples:',
    '    $ ltsn 8',
    '',
  ]

  console.log(lines.join('\n'))
  process.exit(code || 0)
}

// 包的入口函数，里面对参数做剪裁处理，拿到入参并给予不同入参的处理逻辑
function main(argv) {
  // 1. 判断命令是否存在
  if (!argv || argv.length === 0) {
    printHelp(1)
  }

  // 获取解析后的参数，获取一个就移出一个
  const getArg = function () {
    let args = argv.shift()
    args = args.split('=')
    if (args.length > 1) {
      argv.unshift(args.slice(1).join('='))
    }
    return args[0]
  }

  let arg

  while (argv.length) {
    // 2. 获取合法命令，直到所有命令行参数都解析完毕或者程序退出
    arg = getArg()
    switch (arg) {
      // 打印版本号
      case '-v':
      case '-V':
      case '--version':
        printVersion()
        break
      // 打印帮助信息
      case '-h':
      case '-H':
      case '--help':
        printHelp()
        break
      // 打印查询结构
      default:
        printResult(arg)
        break
    }
  }
}

// 启动程序就开始执行主函数
main(process.argv.slice(2))

// 导出main函数
module.exports = main
